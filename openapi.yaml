openapi: 3.0.3
info:
  title: GitHub Issues Wrapper API
  version: 1.0.0
servers:
  - url: http://localhost:{port}
    description: Local development server
    variables:
      port:
        enum:
          - '8000'
        default: '8000'
paths:
  /issues:
    post:
      summary: Create a new issue
      tags:
        - issues
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCreate'
            examples:
              example1:
                value:
                  title: Bug report
                  body: Details about the bug...
                  labels: ["bug","urgent"]
      responses:
        '201':
          description: Issue created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      summary: List issues
      tags:
        - issues
      parameters:
        - in: query
          name: state
          schema:
            type: string
            enum: [open, closed, all]
          description: Filter by issue state
          required: false
          example: open
        - in: query
          name: labels
          schema:
            type: string
          description: Comma-separated label names
          required: false
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          required: false
          example: 1
        - in: query
          name: per_page
          schema:
            type: integer
            minimum: 1
            maximum: 100
          required: false
          example: 30
      responses:
        '200':
          description: List of issues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
  /issues/{number}:
    get:
      summary: Get a single issue
      tags:
        - issues
      parameters:
        - name: number
          in: path
          required: true
          schema:
            type: integer
          description: Issue number
      responses:
        '200':
          description: Issue detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update an issue
      tags:
        - issues
      security:
        - bearerAuth: []
      parameters:
        - name: number
          in: path
          required: true
          schema:
            type: integer
          description: Issue number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueUpdate'
            examples:
              example1:
                value:
                  title: Updated title
                  state: closed
      responses:
        '200':
          description: Issue updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
  /issues/{number}/comments:
    post:
      summary: Add a comment to an issue
      tags:
        - comments
      security:
        - bearerAuth: []
      parameters:
        - name: number
          in: path
          required: true
          schema:
            type: integer
          description: Issue number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
            examples:
              example1:
                value:
                  body: This is a comment.
      responses:
        '201':
          description: Comment added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
  /webhook:
    post:
      summary: Webhook receiver
      tags:
        - webhook
      requestBody:
        description: GitHub Webhook payload
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '204':
          description: Webhook received
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
  /events:
    get:
      summary: Get last processed webhook events
      tags:
        - webhook
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    IssueCreate:
      type: object
      required:
        - title
      properties:
        title:
          type: string
        body:
          type: string
        labels:
          type: array
          items:
            type: string
    IssueUpdate:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        state:
          type: string
          enum: [open, closed]
    Issue:
      type: object
      properties:
        number:
          type: integer
        title:
          type: string
        body:
          type: string
        state:
          type: string
          enum: [open, closed]
        labels:
          type: array
          items:
            type: string
        html_url:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CommentCreate:
      type: object
      required:
        - body
      properties:
        body:
          type: string
    Comment:
      type: object
      properties:
        id:
          type: integer
        body:
          type: string
        user:
          type: string
        created_at:
          type: string
          format: date-time
        html_url:
          type: string
    Event:
      type: object
      properties:
        id:
          type: string
        event:
          type: string
        action:
          type: string
        issue_number:
          type: integer
        timestamp:
          type: string
          format: date-time
  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
